The way our CSP is coded, one will have to get the domain and constraints
by checking if a string is a key of a dict. So we put the part that changes
from a variable to the next first, in order to check more quickly

Switching constraint to set to be able to handle intersections more cleanly

Do we need to actually store the tuples for the constraint ? Should we reduce domain once constraints are generated ? If size
of a constraint is far of domain_1 * domain_2 we should be able to cut.
Should we first build the lambdas and only at the end create the tuples and cut the
domains ?

We need to switch constraints to function only, if there is a need to have a tuple, one can always check if (a,b) in []
as a function.

For the optimization problem, we stay in decision but do a dichotomy on the values.

Switching Domains to a list of domain and constraint to a dict with keys on indices.

Mixing AC3 and forward will not be trivial implementation-wise.
Managed a factor 2 gain

AC3 helps reducing the number of nodes, but it takes a lot of time right now
AC3 takes up 95%+ of the time of our run

Smallest domain first has monstruous results on n queens

Helped reduce the length of coloring by using max degree + 1 as upper bound of the coloring rather than n

For some graphs the max degree is wrong because we have both the arc a -> b and b -> a (which is dumb but hard to cut)
On peut fixer couleur du premier noeud, ça ne pose jamais de problème.

Faire de maj le domain de la dernière variable (dans le backtrack / CSP) et de changer arc consistance pour faire que sur
les contraintes liées à ta last variable la last variable.

Heuristique ? Faire AC3 que sur contraintes liées à la dernière var ajoutée au state au départ ? En fait ok pourvu de bien le faire
en chaque noeud a priori.
Aussi dans AC3 pas besoin de checker une var si elle est instanciée.